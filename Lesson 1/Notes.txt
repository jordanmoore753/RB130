Closures in Ruby

A closure is a programming concept that allows one to save a 'chunk of code' and execute it at a later time. Think of it like a method that is passed around. The difference, however, is that a closure binds all of its surrounding artifacts, like variables, methods, objects, etc., and then encloses it all for future reference when the closure is executed.

We implement a closure through a **Proc** object. When we instantiate an object from the Proc class, we can create a closure. The proc object is the 'chunk of code' to be passed around.

For some reason, to be discussed later, having a chunk of code can be far more convenient than using a method.

We can also work with closures by:

1. Using lambdas
2. Using blocks

We're going to focus on 'blocks' for now.

------------------------------------------------------------

Blocks are just arguments passed into a method. This is nothing new. We have seen this a million times.

[1, 2, 3].map do |num|
  num + 1
end
=> [2, 3, 4]

do |num| => These three lines are the block.
  num + 1
end

Just like we've always seen, the return value of the block depends on what return value is allowed by the method that the block is passed into. #map returns a new array with elements returned from the block because that is how #map works. #each does not work that way.

[1, 3, 5].each do |num|
  num == 1
end
=> [1, 3, 5]

The return value is the original array.

[1, 3, 5] is the object. #each is the method invocation. do...end is the block. |num| is the parameter passed from the object into the block.