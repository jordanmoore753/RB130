Closures in Ruby

A closure is a programming concept that allows one to save a 'chunk of code' and execute it at a later time. Think of it like a method that is passed around. The difference, however, is that a closure binds all of its surrounding artifacts, like variables, methods, objects, etc., and then encloses it all for future reference when the closure is executed.

We implement a closure through a **Proc** object. When we instantiate an object from the Proc class, we can create a closure. The proc object is the 'chunk of code' to be passed around.

For some reason, to be discussed later, having a chunk of code can be far more convenient than using a method.

We can also work with closures by:

1. Using lambdas
2. Using blocks

We're going to focus on 'blocks' for now.

------------------------------------------------------------

Blocks are just arguments passed into a method. This is nothing new. We have seen this a million times.

[1, 2, 3].map do |num|
  num + 1
end
=> [2, 3, 4]

do |num| => These three lines are the block.
  num + 1
end

Just like we've always seen, the return value of the block depends on what return value is allowed by the method that the block is passed into. #map returns a new array with elements returned from the block because that is how #map works. #each does not work that way.

[1, 3, 5].each do |num|
  num == 1
end
=> [1, 3, 5]

The return value is the original array.

[1, 3, 5] is the object. #each is the method invocation. do...end is the block. |num| is the parameter passed from the object into the block.

-------------------------------------------

Yield

We can 'yield' inside of our methods to a block passed to a method.

Example:

constipated?(param) { puts 'maybe' }

On it's own, the block will not be executed. We need to use the 'yield' keyword to get the block executed within our method.

def constipated?(param)
  yield
  true
end

puts constipated?(param) { puts 'maybe' }
=> maybe
=> yes

When we use yield, the method jumps to the block that is written after the method invocation; however, if there's a yield in our code and no block, we will get a LocalJumpError.

We can use the method 'block_given?' to provide our 'yield' with a conditional.

def constipated?(param)
  yield if block_given?
  true
end

Things to remember about blocks:
1. They are one form of a closure.
2. Blocks can take arguments but won't raise a number of arguments error if the wrong amount is given.
3. Blocks return a value (like methods)
4. Blocks can defer some implementation decisions to method invocation time instead of having all the options decided when the method is defined.
5. Blocks are good for 'sandwich code' where a variable changes throughout the code, the block goes between the old code and the new code.
Example: puts str.downcase
         after = block(str) => str.upcase
         puts str
